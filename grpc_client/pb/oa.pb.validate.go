// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: oa.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on OaRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OaRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WsId

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for PageSize

	// no validation rules for PageNumber

	// no validation rules for Type

	return nil
}

// OaRequestValidationError is the validation error returned by
// OaRequest.Validate if the designated constraints aren't met.
type OaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OaRequestValidationError) ErrorName() string { return "OaRequestValidationError" }

// Error satisfies the builtin error interface
func (e OaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OaRequestValidationError{}

// Validate checks the field values on OaResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OaResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OaResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OaResponseValidationError is the validation error returned by
// OaResponse.Validate if the designated constraints aren't met.
type OaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OaResponseValidationError) ErrorName() string { return "OaResponseValidationError" }

// Error satisfies the builtin error interface
func (e OaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OaResponseValidationError{}

// Validate checks the field values on WorkflowsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WorkflowsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WorkflowsResponseValidationError is the validation error returned by
// WorkflowsResponse.Validate if the designated constraints aren't met.
type WorkflowsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowsResponseValidationError) ErrorName() string {
	return "WorkflowsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowsResponseValidationError{}

// Validate checks the field values on Workflows with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Workflows) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for OaId

	// no validation rules for Title

	// no validation rules for Link

	// no validation rules for Status

	// no validation rules for Date

	// no validation rules for Source

	// no validation rules for Type

	// no validation rules for FinishTime

	return nil
}

// WorkflowsValidationError is the validation error returned by
// Workflows.Validate if the designated constraints aren't met.
type WorkflowsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowsValidationError) ErrorName() string { return "WorkflowsValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflows.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowsValidationError{}

// Validate checks the field values on WorkflowsTotalResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WorkflowsTotalResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Data

	return nil
}

// WorkflowsTotalResponseValidationError is the validation error returned by
// WorkflowsTotalResponse.Validate if the designated constraints aren't met.
type WorkflowsTotalResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowsTotalResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowsTotalResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowsTotalResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowsTotalResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowsTotalResponseValidationError) ErrorName() string {
	return "WorkflowsTotalResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowsTotalResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowsTotalResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowsTotalResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowsTotalResponseValidationError{}

// Validate checks the field values on OaUserExperienceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OaUserExperienceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Badge

	return nil
}

// OaUserExperienceRequestValidationError is the validation error returned by
// OaUserExperienceRequest.Validate if the designated constraints aren't met.
type OaUserExperienceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OaUserExperienceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OaUserExperienceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OaUserExperienceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OaUserExperienceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OaUserExperienceRequestValidationError) ErrorName() string {
	return "OaUserExperienceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OaUserExperienceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOaUserExperienceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OaUserExperienceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OaUserExperienceRequestValidationError{}

// Validate checks the field values on OaUserExperienceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OaUserExperienceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OaUserExperienceResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OaUserExperienceResponseValidationError is the validation error returned by
// OaUserExperienceResponse.Validate if the designated constraints aren't met.
type OaUserExperienceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OaUserExperienceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OaUserExperienceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OaUserExperienceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OaUserExperienceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OaUserExperienceResponseValidationError) ErrorName() string {
	return "OaUserExperienceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OaUserExperienceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOaUserExperienceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OaUserExperienceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OaUserExperienceResponseValidationError{}

// Validate checks the field values on UserExperience with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserExperience) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ExperienceType

	// no validation rules for Detail

	// no validation rules for ExperienceTag

	return nil
}

// UserExperienceValidationError is the validation error returned by
// UserExperience.Validate if the designated constraints aren't met.
type UserExperienceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserExperienceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserExperienceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserExperienceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserExperienceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserExperienceValidationError) ErrorName() string { return "UserExperienceValidationError" }

// Error satisfies the builtin error interface
func (e UserExperienceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserExperience.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserExperienceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserExperienceValidationError{}

// Validate checks the field values on OaJobQualificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OaJobQualificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Badge

	return nil
}

// OaJobQualificationRequestValidationError is the validation error returned by
// OaJobQualificationRequest.Validate if the designated constraints aren't met.
type OaJobQualificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OaJobQualificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OaJobQualificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OaJobQualificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OaJobQualificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OaJobQualificationRequestValidationError) ErrorName() string {
	return "OaJobQualificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OaJobQualificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOaJobQualificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OaJobQualificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OaJobQualificationRequestValidationError{}

// Validate checks the field values on OaJobQualificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OaJobQualificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OaJobQualificationResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OaJobQualificationResponseValidationError is the validation error returned
// by OaJobQualificationResponse.Validate if the designated constraints aren't met.
type OaJobQualificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OaJobQualificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OaJobQualificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OaJobQualificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OaJobQualificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OaJobQualificationResponseValidationError) ErrorName() string {
	return "OaJobQualificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OaJobQualificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOaJobQualificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OaJobQualificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OaJobQualificationResponseValidationError{}

// Validate checks the field values on JobQualification with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *JobQualification) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StartDate

	// no validation rules for OriginPosition

	// no validation rules for AuthenticationPosition

	// no validation rules for AuthenticationType

	// no validation rules for AuthenticationJob

	// no validation rules for AbilityItem

	return nil
}

// JobQualificationValidationError is the validation error returned by
// JobQualification.Validate if the designated constraints aren't met.
type JobQualificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobQualificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobQualificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobQualificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobQualificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobQualificationValidationError) ErrorName() string { return "JobQualificationValidationError" }

// Error satisfies the builtin error interface
func (e JobQualificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobQualification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobQualificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobQualificationValidationError{}

// Validate checks the field values on OaPreEntryPersonInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OaPreEntryPersonInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for OaId

	return nil
}

// OaPreEntryPersonInfoRequestValidationError is the validation error returned
// by OaPreEntryPersonInfoRequest.Validate if the designated constraints
// aren't met.
type OaPreEntryPersonInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OaPreEntryPersonInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OaPreEntryPersonInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OaPreEntryPersonInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OaPreEntryPersonInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OaPreEntryPersonInfoRequestValidationError) ErrorName() string {
	return "OaPreEntryPersonInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OaPreEntryPersonInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOaPreEntryPersonInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OaPreEntryPersonInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OaPreEntryPersonInfoRequestValidationError{}

// Validate checks the field values on OaPreEntryPersonSalaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OaPreEntryPersonSalaryResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OaPreEntryPersonSalaryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OaPreEntryPersonSalaryResponseValidationError is the validation error
// returned by OaPreEntryPersonSalaryResponse.Validate if the designated
// constraints aren't met.
type OaPreEntryPersonSalaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OaPreEntryPersonSalaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OaPreEntryPersonSalaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OaPreEntryPersonSalaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OaPreEntryPersonSalaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OaPreEntryPersonSalaryResponseValidationError) ErrorName() string {
	return "OaPreEntryPersonSalaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OaPreEntryPersonSalaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOaPreEntryPersonSalaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OaPreEntryPersonSalaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OaPreEntryPersonSalaryResponseValidationError{}

// Validate checks the field values on SalaryInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SalaryInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TrialSalary

	// no validation rules for RegularSalary

	// no validation rules for MonthlyBonus

	// no validation rules for YearBonus

	return nil
}

// SalaryInfoValidationError is the validation error returned by
// SalaryInfo.Validate if the designated constraints aren't met.
type SalaryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SalaryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SalaryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SalaryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SalaryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SalaryInfoValidationError) ErrorName() string { return "SalaryInfoValidationError" }

// Error satisfies the builtin error interface
func (e SalaryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSalaryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SalaryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SalaryInfoValidationError{}
